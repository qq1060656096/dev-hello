// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/demo.proto

package demo

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Demo service

func NewDemoEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Demo service

type DemoService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (Demo_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Demo_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (Demo_BidiStreamService, error)
}

type demoService struct {
	c    client.Client
	name string
}

func NewDemoService(name string, c client.Client) DemoService {
	return &demoService{
		c:    c,
		name: name,
	}
}

func (c *demoService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "Demo.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoService) ClientStream(ctx context.Context, opts ...client.CallOption) (Demo_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "Demo.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &demoServiceClientStream{stream}, nil
}

type Demo_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*ClientStreamRequest) error
}

type demoServiceClientStream struct {
	stream client.Stream
}

func (x *demoServiceClientStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *demoServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *demoServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *demoServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *demoServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *demoServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *demoService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Demo_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "Demo.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &demoServiceServerStream{stream}, nil
}

type Demo_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type demoServiceServerStream struct {
	stream client.Stream
}

func (x *demoServiceServerStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *demoServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *demoServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *demoServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *demoServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *demoServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *demoService) BidiStream(ctx context.Context, opts ...client.CallOption) (Demo_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "Demo.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &demoServiceBidiStream{stream}, nil
}

type Demo_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type demoServiceBidiStream struct {
	stream client.Stream
}

func (x *demoServiceBidiStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *demoServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *demoServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *demoServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *demoServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *demoServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *demoServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Demo service

type DemoHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, Demo_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, Demo_ServerStreamStream) error
	BidiStream(context.Context, Demo_BidiStreamStream) error
}

func RegisterDemoHandler(s server.Server, hdlr DemoHandler, opts ...server.HandlerOption) error {
	type demo interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
	}
	type Demo struct {
		demo
	}
	h := &demoHandler{hdlr}
	return s.Handle(s.NewHandler(&Demo{h}, opts...))
}

type demoHandler struct {
	DemoHandler
}

func (h *demoHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.DemoHandler.Call(ctx, in, out)
}

func (h *demoHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.DemoHandler.ClientStream(ctx, &demoClientStreamStream{stream})
}

type Demo_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type demoClientStreamStream struct {
	stream server.Stream
}

func (x *demoClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *demoClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *demoClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *demoClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *demoClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *demoHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.DemoHandler.ServerStream(ctx, m, &demoServerStreamStream{stream})
}

type Demo_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type demoServerStreamStream struct {
	stream server.Stream
}

func (x *demoServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *demoServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *demoServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *demoServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *demoServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *demoHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.DemoHandler.BidiStream(ctx, &demoBidiStreamStream{stream})
}

type Demo_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type demoBidiStreamStream struct {
	stream server.Stream
}

func (x *demoBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *demoBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *demoBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *demoBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *demoBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *demoBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
